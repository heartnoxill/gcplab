Google Kubernetes Engine

gcloud config set compute/zone us-central1-b
gcloud container clusters create io

Task 1. Get the sample code

gsutil cp -r gs://spls/gsp021/* .
cd orchestrate-with-kubernetes/kubernetes

Task 2. Quick Kubernetes Demo

kubectl create deployment nginx --image=nginx:1.10.0
kubectl get pods
kubectl expose deployment nginx --port 80 --type LoadBalancer

#So what just happened? Behind the scenes Kubernetes created an external Load Balancer with a public IP address attached to it. Any client who hits that public IP address will be routed to the pods behind the service. In this case that would be the nginx pod.

kubectl get services
curl http://<External IP>:80

Task 4. Creating pods

cd ~/orchestrate-with-kubernetes/kubernetes
cat pods/monolith.yaml

kubectl create -f pods/monolith.yaml
kubectl get pods

Task 5. Interacting with pods

#TERMINAL2
kubectl port-forward monolith 10080:80
#TERMINAL1
curl http://127.0.0.1:10080

curl http://127.0.0.1:10080/secure
curl -u user http://127.0.0.1:10080/login

TOKEN=$(curl http://127.0.0.1:10080/login -u user|jq -r '.token')

curl -H "Authorization: Bearer $TOKEN" http://127.0.0.1:10080/secure

kubectl logs monolith

#TERMINAL3
kubectl logs -f monolith

curl http://127.0.0.1:10080
kubectl exec monolith --stdin --tty -c monolith -- /bin/sh
ping -c 3 google.com
exit

Task 7. Creating a service

kubectl create secret generic tls-certs --from-file tls/
kubectl create configmap nginx-proxy-conf --from-file nginx/proxy.conf
kubectl create -f pods/secure-monolith.yaml

kubectl create -f services/monolith.yaml

#allow traffic to the monolith service on the exposed nodeport
gcloud compute firewall-rules create allow-monolith-nodeport \
  --allow=tcp:31000

Task 8. Adding labels to pods

kubectl get pods -l "app=monolith"

kubectl label pods secure-monolith 'secure=enabled'
kubectl get pods secure-monolith --show-labels

kubectl describe services monolith | grep Endpoints

gcloud compute instances list
curl -k https://<EXTERNAL_IP>:31000

Task 10. Creating deployments

#auth - Generates JWT tokens for authenticated users.
#hello - Greet authenticated users.
#frontend - Routes traffic to the auth and hello services.

kubectl create -f deployments/auth.yaml
kubectl create -f services/auth.yaml

kubectl create -f deployments/hello.yaml
kubectl create -f services/hello.yaml

kubectl create configmap nginx-frontend-conf --from-file=nginx/frontend.conf
kubectl create -f deployments/frontend.yaml
kubectl create -f services/frontend.yaml

kubectl get services frontend

curl -k https://<EXTERNAL-IP>
